# Antonia Ritter and McKenna Wirth
# CS338 Spring 2022
# SSH File Formats Assignment 
# RSA Testing 

import math

p = 0x00f577cca4e0c4492ed39c896c8a52344dd3369daf380e5d0dfa241b84272f865f0462412337cd08355812e849f15e7c6e27429c8eb28d3129c038ba703841864d7deb64aaa5bce1e343e0fead0d98a4cca58c93d99348105851ea2f8535d177e4b35f3824a6db7a091805ce9f3ae3dd111fe49090c474992708f15c7bee763a3384a047fa6f88615696f3014fb3b790003c8de27df5272a269f4e81173817dee3808c48b5218d854aac310b959612b6636a7e94e2a9ed96e4e40cd14ead00e88b
q = 0x00df7e543cf1df2965e6ecce343ee5de780c0cb2d6b222e50c05770b867c4fa0a6ec386086f681d7641fd2f925331d1e5db993cd89cc6c96a38786a826ef1583e6a3047b1bd28fb4b46183772ee1256363113da89e86c3af4006b807d5eae0c90042bf2d7593ccebcdff881eba3ee8a4869bc07ae944b60bebc14770c007c84ecbad0e38145c4c7f82046b3bec0f3540da8b6d34096bdd336cfd5e381b2aa5eb48d9a8d4e7bf807b73b3b5593adaa2dd5c1ff9390164f9a69f9a689c5688393729
e = 65537
d = 4607533641130930694729632356118812402743921811935311628416463571209425490759360448675330320778431311999518993427979387327361314974987141187269672857138540366784774202164588694272228813990671790097106740681333742306296056959780759432132387164153899397525820626889525916370211217060981378740691263045588283518874692118264409565415991294509130305982267586687596990175876204430464852584322587335403218896868505118996830695512179554441929802744652203756582253770739133074144802537978567551417846310455685263620108936790823683642736554766116485829188875566624332318402235689205910925173153565541652074492169599826905082092605110088123257027107238360910565967130794581772283753586792586589270346424586070612502262704933500529864676386346251982681725596864901888052867987345437192524681718132956443891222768802422079706202869682674753703431856814971566771624893497979129549204409514206800253084934344277839057249762920897614544549681
n = 0x00d64c7d0018176f754615721c611ccf0b81665e5f3ee2009a437eb2ac4829f64031abc53d658f820fa91ccea72aa3b3b4bedcdee55e6983e31b9dcfd35d3f4bd06ac9b3cfbd859617bc60868a6e475866b93b164011c1437ebdd819ba947234e65909b1066a0bc8c76625feec16f49fa514f92eaf3c545bd739c2f002ba64151dc636383050f7c6f5d045fa6c2032a20e334d7c18d090b9a7e29a97d52a2fe66ea9822ad14eb68a28b911009eb5b9301f06e7e38227c040d15d36094e3f750ba2953442f8b97070cc5a9ed1acd5313cdf65b339c77b1cb55003801c6f2b1c2c80347b2997e522042c8353f9ce6533af2c058d0c28f79bb02a36f1aaf9bbd49840d425288baaf37b1cc5cdb41a64c5ebbc87f460c7dc6edbe0eec50a6d796e9eeb2e06c500aa98e0af816340c734fe64173ed5dc78f0f6cfda23ae3cf47b0872f9a3a41d495318211596b0cb25a10baf675cda95b971be787209d7ddb78c1ec0f0396320c2d274f55918c578be58bcdf28d6b5a029c20694256fed4034860e1b43

if n==p*q:
    print("n = p*q as it should")
else: 
    print("n doesn't equal p*q")

lambdaN = math.lcm(p-1, q-1)
# print(f"lambda(n) = {lambdaN}")

check1 = math.gcd(e, lambdaN) 
print(f"{check1} should be 1")

check2 = (e * d) % lambdaN
print(f"{check2} should be 1")

